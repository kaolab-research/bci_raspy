signals:
  timer_tick_time_ns:
    shape: 1
    dtype: int64
    
  decoded_pos:
    shape: 2
    dtype: float32

  target_pos:
    shape: 2
    dtype: float32
    
  target_size:
    shape: 2
    dtype: float32

  state_task:
    shape: 1 # use "shape: ()"?
    dtype: int8

  game_state:
    shape: 1 # use "shape: ()"?
    dtype: int8
  
  # warning: this is a bipartite buffer.
  # indexing starts at ().shape[0] // 2
  eegbuffersignal:
    shape: (10000, 66)
    dtype: float32
  
  databuffer:
    shape: (10000, 66)
    dtype: float32
  
  # Index within eegbuffersignal to put new data,
  # NOT position of most recent data. Subtract 1 for most recent
  # Should never be less than half of eegbuffersignal.shape[0]
  # use int32 if needed
  eegbufferindex:
    shape: 1
    dtype: int16
    
  v_decoded:
    shape: 2
    dtype: float32
  
  # can be class probabilities or velocity
  decoder_output:
    shape: 5
    dtype: float32
    
  numEEGSamples:
    shape: 1
    dtype: int16
    
  totalValidEEGSamples:
    shape: 1
    dtype: int64

  reload:
    shape: 1
    dtype: bool
  
  gaze_buffer:
    shape: (600, 32)
    dtype: float64
  gaze_buffer_idx:
    shape: 1
    dtype: int16
  
  text_pos:
    shape: 2
    dtype: float64
  text_direction:
    shape: 1
    dtype: int16

modules:
  # WARNING: make sure you have an exit condition when using loop: False
  # Note: it is possible for KeyboardInterrupt to be sufficient.
  logger_disk:
    constructor: True
    destructor: False
    loop: False
    params:
      #save_path: ./data/
      save_path: /home/necl-eeg/data/raspy/
      connections:
        local: # connection_name. should only have 1. Not sure why this level is here.
          task: # stream_name
            IP: '127.0.0.1'
            PORT: 7701
          eeg:
            IP: '127.0.0.1'
            PORT: 7702
          gaze:
            IP: '127.0.0.1'
            PORT: 7703

  timer:
    constructor: True
    destructor: True
    sync:
      - logger
    trigger: True
    out:
      - timer_tick_time_ns
    params:
      timer_type: sleep # pygame or sleep
      dt: 20000 # in microseconds.
      verbose: True
  
  recv_gaze_buffer:
    constructor: True
    destructor: True
    sync:
      - timer
    out:
      - gaze_buffer
      - gaze_buffer_idx
    trigger: False
    params:
      IP: auto #10.0.1.25
      PORT: 7780

  UpdateEEG:
    constructor: True
    destructor: True
    sync:
      - timer
    out:
      - eegbuffersignal
      - eegbufferindex
      - numEEGSamples
      - totalValidEEGSamples
    trigger: False
    params:
      IP: '127.0.0.1'
      PORT: 7779
  
  filterEEG:
    constructor: True
    destructor: False
    sync:
      - UpdateEEG
    in:
      - eegbuffersignal
      - eegbufferindex
      - numEEGSamples
      - totalValidEEGSamples
    out:
      - databuffer
      
  SJ_text_classification:
    constructor: True
    destructor: True
    sync:
      - timer
    in:
      - eegbufferindex
      - state_task
      - decoder_output
    out:
      - decoded_pos
      - target_pos
      - target_size
      - game_state
      - text_pos
      - text_direction
    params:
      sessionLength: 1200 # seconds
      screenSize: [700, 700] # w,h
      actionTextFontSize: 80 #80 default
      fullScreen: True
      objScale: 0.001 # 1/1000
      cursorRadius: 0
      cursorVel: [0.015, 0.015] # max is 1 (0~1)
      styleChange : False
      skipFirstNtrials: 1
      resetCursorPos: True
      decodedVel:  # max is 1
        0 : [-1. ,  0]   #   0 : left
        1 : [ 1. ,  0]   #   1 : right
        2 : [ 0. ,  1]   #   2 : up
        3 : [ 0. , -1]   #   3 : down
        4 : [ 0. ,  0]   #   4 : still
      graceTimeThres: 0 # seconds
      softmaxThres: 0.0
      activeLength: 20 # seconds
      inactiveLength: 2 # seconds
      # displayLength: 5
      # hideProgressBar: True
      showSoftmax: False
      showCountDown: True
      yamlName : models/templates/SJ-text-gaze.yaml # ***
      previewTimeThres: 0.0 # how long to show preview of next text (between 0 to 1)
      textVelScale: 0.0 # 0.5
      
      testedAction:   # max is 1 (pos, size)
      # Healthy
        - Left Hand
        - Right Hand
        - Both Hands
        - Feet
        # - Still
      # # SCI
      #   - Left Leg # 126
      #   - Right Leg # 127
      #   - Both Legs # 125
      #   - Still # 4
      #   # - Fingers # 22
      # # ALS
      # - Left Hand
      # - Right Hand
      # - Legs
      # - Still
      # # ALS 2
      # - Both Hands
      # - Subtract
      # - Still

      action2state_task: # what number should state task use when it is using target
        
        Left Hand : 0
        Left Arm: -127
        left : 0
        
        Right Hand : 1
        Right Arm: -126
        right : 1
        
        Both Hands : 2
        Up : 2
        
        Down : 3
        Feet : 3

        still : 4
        Still : 4
        Relax : 4

        Subtract : 5
        
        Sing : 6

        Walk : 7


        Foot Left : 8
        Foot Right : 9

        Left Fingers: 20
        Right Fingers: 21
        Fingers: 22

        Left x 1 : 101
        Left x 2 : 102
        Left x 3 : 103
        Right x 1 : 104
        Right x 2 : 105
        Right x 3 : 106

        Tongue : 107
        Nodding: 108
        Butterfly : 109
        Clap : 110
        Shake Hand : 111
        Snap Finger : 112
        Chewing : 113
        Stomp Left : 114
        Stomp Right : 115
        Left Handshake : 116
        Right Handshake : 117
        Tongue in-out : 118
        Tongue top : 119
        Word Association: 120
        math: 121

        Left Wrist : 122
        Right Wrist : 123
        Both Wrist : 124
        Legs : 125
        Both Legs: 125
        Left Leg : 126
        Right Leg : 127
        Cube Rotation : 128

        ~ : -1 # None (when there is no target. [i.e stop] assign some number to state_task = -1)
  
  logger:
    constructor: True
    destructor: True
    sync:
      - SJ_text_classification
      - recv_gaze_buffer
    in:
      - timer_tick_time_ns
      - eegbuffersignal
      - databuffer
      - eegbufferindex
      - state_task
      - decoder_output
      - decoded_pos
      - game_state
      # gaze
      - gaze_buffer
      - gaze_buffer_idx
      # text
      - text_pos
      - text_direction # 0: L, 1: R, 2: U, 3: D
    params:
      log:
        task:
          signals:
            - timer_tick_time_ns
            - state_task
            - decoder_output
            - decoded_pos
            - game_state
            # text
            - text_pos
            - text_direction
        eeg:
          index: eegbufferindex
          buffers:
            - eegbuffersignal
            - databuffer
        gaze:
          index: gaze_buffer_idx
          buffers:
            - gaze_buffer
      connections:
        local:
          task:
            IP: '127.0.0.1'
            PORT: 7701
          eeg:
            IP: '127.0.0.1'
            PORT: 7702
          gaze:
            IP: '127.0.0.1'
            PORT: 7703
